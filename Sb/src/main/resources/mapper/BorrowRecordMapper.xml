<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.mapper.BorrowRecordMapper">
    
    <resultMap id="BorrowRecordResultMap" type="com.library.entity.BorrowRecord">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="bookId" column="book_id"/>
        <result property="status" column="status"/>
        <result property="borrowTime" column="borrow_time"/>
        <result property="returnTime" column="return_time"/>
        <result property="dueTime" column="due_time"/>
        <result property="remark" column="remark"/>
        <result property="userName" column="user_name"/>
        <result property="bookTitle" column="book_title"/>
        <result property="bookAuthor" column="book_author"/>
        <result property="bookIsbn" column="book_isbn"/>
    </resultMap>
    
    <insert id="insert" parameterType="com.library.entity.BorrowRecord" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO borrow_records (user_id, book_id, status, borrow_time, due_time, remark)
        VALUES (#{userId}, #{bookId}, #{status}, #{borrowTime}, #{dueTime}, #{remark})
    </insert>
    
    <select id="findById" resultMap="BorrowRecordResultMap">
        SELECT br.*, u.real_name as user_name, b.title as book_title, b.author as book_author, b.isbn as book_isbn
        FROM borrow_records br
        LEFT JOIN users u ON br.user_id = u.id
        LEFT JOIN books b ON br.book_id = b.id
        WHERE br.id = #{id}
    </select>
    
    <update id="update" parameterType="com.library.entity.BorrowRecord">
        UPDATE borrow_records SET
        status = #{status},
        return_time = #{returnTime},
        remark = #{remark}
        WHERE id = #{id}
    </update>
    
    <select id="findByPage" resultMap="BorrowRecordResultMap">
        SELECT br.*, u.real_name as user_name, b.title as book_title, b.author as book_author, b.isbn as book_isbn
        FROM borrow_records br
        LEFT JOIN users u ON br.user_id = u.id
        LEFT JOIN books b ON br.book_id = b.id
        <where>
            <if test="userId != null">
                AND br.user_id = #{userId}
            </if>
            <if test="status != null">
                AND br.status = #{status}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (b.title LIKE CONCAT('%', #{keyword}, '%') 
                OR b.author LIKE CONCAT('%', #{keyword}, '%')
                OR b.isbn LIKE CONCAT('%', #{keyword}, '%')
                OR u.real_name LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        ORDER BY br.borrow_time DESC
    </select>
    
    <select id="findCurrentBorrowsByUserId" resultMap="BorrowRecordResultMap">
        SELECT br.*, u.real_name as user_name, b.title as book_title, b.author as book_author, b.isbn as book_isbn
        FROM borrow_records br
        LEFT JOIN users u ON br.user_id = u.id
        LEFT JOIN books b ON br.book_id = b.id
        WHERE br.user_id = #{userId} AND br.status = 1
        ORDER BY br.borrow_time DESC
    </select>
    
    <select id="findCurrentBorrow" resultMap="BorrowRecordResultMap">
        SELECT * FROM borrow_records 
        WHERE user_id = #{userId} AND book_id = #{bookId} AND status = 1
    </select>
    
    <update id="returnBook">
        UPDATE borrow_records SET status = 2, return_time = NOW() WHERE id = #{id}
    </update>
    
    <select id="countBorrowRecords" resultType="int">
        SELECT COUNT(*) FROM borrow_records
        <where>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </select>
    
    <select id="findOverdueRecords" resultMap="BorrowRecordResultMap">
        SELECT br.*, u.real_name as user_name, b.title as book_title, b.author as book_author, b.isbn as book_isbn
        FROM borrow_records br
        LEFT JOIN users u ON br.user_id = u.id
        LEFT JOIN books b ON br.book_id = b.id
        WHERE br.status = 1 AND br.due_time < NOW()
        ORDER BY br.due_time ASC
    </select>
    
    <select id="getBorrowStatistics" resultType="map">
        SELECT 
            DATE(borrow_time) as date,
            COUNT(*) as count
        FROM borrow_records 
        WHERE borrow_time >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        GROUP BY DATE(borrow_time)
        ORDER BY date ASC
    </select>
    
    <select id="getPopularBooksStatistics" resultType="map">
        SELECT 
            b.title as book_title,
            b.author as book_author,
            COUNT(*) as borrow_count
        FROM borrow_records br
        LEFT JOIN books b ON br.book_id = b.id
        GROUP BY br.book_id, b.title, b.author
        ORDER BY borrow_count DESC
        LIMIT #{limit}
    </select>
    
</mapper>